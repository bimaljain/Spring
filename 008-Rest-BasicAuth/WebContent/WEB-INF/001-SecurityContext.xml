<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
    http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.0.xsd">
	
	<!-- 
	create-session="stateless" : This is needed otherwise the session will store the credentials. So when you try to use the API without credentials,
		you will still be able to access API 
	entry-point-ref="customBasicAuthenticationEntryPoint" : In case the Authentication fails [invalid/missing credentials], this entry point will get 
		triggered. It is important, because we don't want Spring Security default behavior of sending login page.
	-->
	
<!-- 	<http authentication-manager-ref="dao-auth" create-session="stateless"> -->
<!-- 	<http authentication-manager-ref="jdbc-auth" create-session="stateless"> -->
	<http authentication-manager-ref="in-memory-auth" create-session="stateless">
		<intercept-url pattern="/001/user/" access="hasRole('ADMIN')" />
		<http-basic entry-point-ref="customBasicAuthenticationEntryPoint"/>
	</http>
	
	<!-- We have defined 3 different ways to authenticate user credentials. -->
	<authentication-manager id="in-memory-auth">
		<authentication-provider>
			<!--  Creates an in-memory UserDetailsService -->
			<user-service>
				<user name="bimal" password="bimal" authorities="ROLE_USER" />
				<user name="admin" password="admin" authorities="ROLE_ADMIN" />
				<user name="db" password="db" authorities="ROLE_DBA" />
			</user-service>
		</authentication-provider>
	</authentication-manager>	
	
	<authentication-manager id="jdbc-auth">
		<authentication-provider>		 
		 <!-- jdbc-user-service will create jdbc based UserDetailsService -->
		 <!-- First query must return 3 columns, otherwise Spring throws error. Third column is called ENABLED. We have returned just 1 -->
			<jdbc-user-service 
				data-source-ref="dataSource"
				users-by-username-query="select user_id,password,1 from user_details where user_id = ?"
				authorities-by-username-query="select user_id,role from user_role where user_id = ?" />
		</authentication-provider>
	</authentication-manager>
	
	<authentication-manager id="dao-auth">
		<!-- we have implemented our own UserDetailsService -->
		<authentication-provider user-service-ref="userDetailsService" />
	</authentication-manager>
	
	<beans:bean id="userDetailsService" class="_001.UserDetailsServiceImpl" />
	<beans:bean id="customBasicAuthenticationEntryPoint" class="_001.CustomBasicAuthenticationEntryPoint" />

</beans:beans>